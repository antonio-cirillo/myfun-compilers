// java -jar C:\CUP\java-cup-11b.jar -destdir src srcjflexcup/fun.cup

import it.unisa.nodes.*;
import it.unisa.nodes.expr.*;
import it.unisa.nodes.stat.*;
import it.unisa.nodes.var.*;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.tree.DefaultMutableTreeNode;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Enumeration;

terminal String MAIN, IF, THEN, ELSE, WHILE, LOOP, END,
    ID, VAR, INTEGER, REAL, STRING, BOOL,
    FUN, LPAR, OUT, OUTPAR, RPAR, COMMA, RETURN, COLON, SEMI,
    ASSIGN, PLUS, MINUS, TIMES, DIVINT, DIV, POW,
    STR_CONCAT, EQ, NE, LT, LE, GT, GE, AND, OR, NOT,
    INTEGER_CONST, REAL_CONST, STRING_CONST, BOOL_CONST,
    WRITE, READ;

terminal UMINUS, ASSOC;

non terminal ProgramOp Program;
non terminal BodyOp Main;
non terminal VarDeclOp VarDecl;
non terminal FunOp Fun;
non terminal ParamDeclOp ParamDecl;
non terminal String Type;
non terminal Stat Stat, IfStat, Else, WhileStat, ReadStat, WriteStat, AssignStat, CallFunStat, ReturnStat;
non terminal Expr CallFunExpr, Expr, Const;

non terminal ArrayList <VarDeclOp> VarDeclList;
non terminal ArrayList <DefaultMutableTreeNode> IdListInit, IdListInitObbl;
non terminal ArrayList <ParamDeclOp> ParamDeclList, NonEmptyParamDeclList;
non terminal ArrayList <FunOp> FunList;
non terminal ArrayList <Stat> StatList;
non terminal ArrayList <Value> IdList;
non terminal ArrayList <Expr> ExprList;

/* Precedenze */
precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc EQ, NE, LT, LE, GT, GE;
precedence left STR_CONCAT;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, DIVINT;
precedence left POW;
precedence left UMINUS;
precedence left ASSOC;

Program                 ::= VarDeclList:varDeclList FunList:funList Main:main
                        {:  RESULT = new ProgramOp(varDeclList, funList, main); :}
;

VarDeclList             ::= /* empty */
                        {:  RESULT = new ArrayList <> (); :}
                        |   VarDecl:var VarDeclList:varList
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(var);
                            RESULT.addAll(varList);
                        :}
;

Main                    ::= MAIN VarDeclList:varDeclList StatList:statList END MAIN SEMI
                        {:  RESULT = new BodyOp(varDeclList, statList); :}
;

FunList                 ::= Fun:fun FunList:funList
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(fun);
                            RESULT.addAll(funList);
                        :}
                        |   /* empty */
                        {:  RESULT = new ArrayList <> (); :}
;

VarDecl                 ::= Type:type IdListInit:idList SEMI
                        {:  RESULT = new VarDeclOp(type, idList); :}
                        |   VAR IdListInitObbl:idList SEMI
                        {:  RESULT = new VarDeclOp("var", idList); :}
;

Type                    ::= INTEGER
                        {:  RESULT = "integer"; :}
                        |   REAL
                        {:  RESULT = "real"; :}
                        |   STRING
                        {:  RESULT = "string"; :}
                        |   BOOL
                        {:  RESULT = "bool"; :}
;

IdListInit              ::= ID:id
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(new Value("id", id));
                        :}
                        |   IdListInit:idList COMMA ID:id
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(new Value("id", id));
                            RESULT.addAll(idList);
                        :}
                        |   ID:id ASSIGN Expr:e
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(new IdInitOp(id, e));
                        :}
                        |   IdListInit:idList COMMA ID:id ASSIGN Expr:e
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(new IdInitOp(id, e));
                            RESULT.addAll(idList);
                        :}
;

IdListInitObbl          ::= ID:id ASSIGN Const:c
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(new IdInitOp(id, c));
                        :}
                        |   IdListInitObbl:idList COMMA ID:id ASSIGN Const:c
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(new IdInitOp(id, c));
                            RESULT.addAll(idList);
                        :}
;

Const                   ::= BOOL_CONST:b
                        {:  RESULT = new Value("bool_const", b); :}
                        |   INTEGER_CONST:i
                        {:  RESULT = new Value("integer_const", i); :}
                        |   REAL_CONST:r
                        {:  RESULT = new Value("real_const", r); :}
                        |   STRING_CONST:s
                        {:  RESULT = new Value("string_const", s); :}
;

Fun                     ::= FUN ID:id LPAR ParamDeclList:paramDeclList RPAR COLON Type:type
                            VarDeclList:varDeclList StatList:statList END FUN SEMI
                        {:  RESULT = new FunOp(id, paramDeclList, type, varDeclList, statList); :}
                        |   FUN ID:id LPAR ParamDeclList:paramDeclList RPAR
                            VarDeclList:varDeclList StatList:statList END FUN SEMI
                        {:  RESULT = new FunOp(id, paramDeclList, varDeclList, statList); :}
;

ParamDeclList           ::= NonEmptyParamDeclList:paramList
                        {:  RESULT = paramList; :}
                        |   /* empty */
                        {:  RESULT = new ArrayList <> (); :}
;

NonEmptyParamDeclList   ::= ParamDecl:param
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(param);
                        :}
                        |   NonEmptyParamDeclList:paramList COMMA ParamDecl:param
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(param);
                            RESULT.addAll(paramList);
                        :}
;

ParamDecl               ::= Type:type ID:id
                        {:  RESULT = new ParamDeclOp(type, id); :}
                        |   OUT Type:type ID:id
                        {:  RESULT = new ParamDeclOp("out", type, id); :}
;

StatList                ::= Stat:stat SEMI
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(stat);
                        :}
                        |   Stat:stat SEMI StatList:statList
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(stat);
                            RESULT.addAll(statList);
                        :}
                        |   /* empty */
                        {:  RESULT = new ArrayList <> (); :}
;

Stat                    ::= IfStat:ifStat
                        {:  RESULT = ifStat; :}
                        |   WhileStat:whileStat
                        {:  RESULT = whileStat; :}
                        |   ReadStat:readStat
                        {:  RESULT = readStat; :}
                        |   WriteStat:writeStat
                        {:  RESULT = writeStat; :}
                        |   AssignStat:assignStat
                        {:  RESULT = assignStat; :}
                        |   CallFunStat:callFun
                        {:  RESULT = callFun; :}
                        |   ReturnStat:returnStat
                        {:  RESULT = returnStat; :}
;

IfStat                  ::= IF Expr:expr THEN VarDeclList:varDeclList StatList:statList Else:elseBody END IF
                        {:  RESULT = new IfStatOp(expr, varDeclList, statList, elseBody); :}
;

Else                    ::= ELSE IF Expr:expr THEN VarDeclList:varDeclList StatList:statList Else:elseBody
                        {:  RESULT = new IfStatOp(expr, varDeclList, statList, elseBody); :}
                        |   ELSE VarDeclList:varDeclList StatList:statList
                        {:  RESULT = new BodyOp(varDeclList, statList); :}
                        |   /* empty */
;

WhileStat               ::= WHILE Expr:expr LOOP VarDeclList:varDeclList StatList:statList END LOOP
                        {:  RESULT = new WhileOp(expr, varDeclList, statList); :}
;

ReadStat                ::= READ IdList:idList Expr:expr
                        {:  RESULT = new ReadOp(idList, expr); :}
                        |   READ IdList:idList
                        {:  RESULT = new ReadOp(idList); :}
;


IdList                  ::= ID:id
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(new Value("id", id));
                        :}
                        |   IdList:idList COMMA ID:id
                        {:
                            RESULT = new ArrayList <> ();
                            RESULT.add(new Value("id", id));
                            RESULT.addAll(idList);
                        :}
;

WriteStat               ::= WRITE:write Expr:expr
                        {:  RESULT = new WriteOp(write, expr); :}
;

AssignStat              ::= ID:id ASSIGN Expr:expr
                        {:  RESULT = new AssignOp(id, expr); :}
;

CallFunStat             ::= ID:id LPAR ExprList:exprList RPAR
                        {:  RESULT = new CallFunOpStat(id, exprList); :}
                        |   ID:id LPAR RPAR
                        {:  RESULT = new CallFunOpStat(id); :}
;

CallFunExpr             ::= ID:id LPAR ExprList:exprList RPAR
                        {:  RESULT = new CallFunOpExpr(id, exprList); :}
                        |   ID:id LPAR RPAR
                        {:  RESULT = new CallFunOpExpr(id); :}
;

ReturnStat              ::= RETURN Expr:expr
                        {:  RESULT = new ReturnOp(expr); :}
;

ExprList                ::= Expr:expr
                        {:
                            RESULT = new ArrayList <> ();
                            expr.setMode("in");
                            RESULT.add(expr);
                        :}
                        |   Expr:expr COMMA ExprList:exprList
                        {:
                            RESULT = new ArrayList <> ();
                            expr.setMode("in");
                            RESULT.add(expr);
                            RESULT.addAll(exprList);
                        :}
                        |   OUTPAR ID:id
                        {:
                            RESULT = new ArrayList <> ();
                            Value idValue = new Value("id", id);
                            idValue.setMode("out");
                            RESULT.add(idValue);
                        :}
                        |   OUTPAR ID:id COMMA ExprList:exprList
                        {:
                            RESULT = new ArrayList <> ();
                            Value idValue = new Value("id", id);
                            idValue.setMode("out");
                            RESULT.add(idValue);
                            RESULT.addAll(exprList);
                        :}
;

Expr                    ::= Const:c
                        {:  RESULT = c; :}
                        |   ID:id
                        {:  RESULT = new Value("id", id); :}
                        |   CallFunExpr:callFun
                        {:  RESULT = callFun; :}
                        |   Expr:e1 PLUS Expr:e2
                        {:  RESULT = new BinaryOp("AddOp", e1, e2); :}
                        |   Expr:e1 MINUS Expr:e2
                        {:  RESULT = new BinaryOp("DiffOp", e1, e2); :}
                        |   Expr:e1 TIMES Expr:e2
                        {:  RESULT = new BinaryOp("MulOp", e1, e2); :}
                        |   Expr:e1 DIVINT Expr:e2
                        {:  RESULT = new BinaryOp("DivIntOp", e1, e2); :}
                        |   Expr:e1 DIV Expr:e2
                        {:  RESULT = new BinaryOp("DivOp", e1, e2); :}
                        |   Expr:e1 POW Expr:e2
                        {:  RESULT = new BinaryOp("PowOp", e1, e2); :}
                        |   Expr:e1 STR_CONCAT Expr:e2
                        {:  RESULT = new BinaryOp("StrCatOp", e1, e2); :}
                        |   Expr:e1 EQ Expr:e2
                        {:  RESULT = new BinaryOp("EQOp", e1, e2); :}
                        |   Expr:e1 LT Expr:e2
                        {:  RESULT = new BinaryOp("LTOp", e1, e2); :}
                        |   Expr:e1 LE Expr:e2
                        {:  RESULT = new BinaryOp("LEOp", e1, e2); :}
                        |   Expr:e1 NE Expr:e2
                        {:  RESULT = new BinaryOp("NEOp", e1, e2); :}
                        |   Expr:e1 GT Expr:e2
                        {:  RESULT = new BinaryOp("GTOp", e1, e2); :}
                        |   Expr:e1 GE Expr:e2
                        {:  RESULT = new BinaryOp("GEOp", e1, e2); :}
                        |   Expr:e1 AND Expr:e2
                        {:  RESULT = new BinaryOp("AndOp", e1, e2); :}
                        |   Expr:e1 OR Expr:e2
                        {:  RESULT = new BinaryOp("OrOp", e1, e2); :}
                        |   NOT Expr:e
                        {:  RESULT = new UnaryOp("NotOp", e); :}
                        |   MINUS Expr:e
                        {:  RESULT = new UnaryOp("UminusOp", e); :}
                            %prec UMINUS
                        |   LPAR Expr:e RPAR
                        {:  RESULT = e; :}
                            %prec ASSOC
;