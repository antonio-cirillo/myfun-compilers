
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import it.unisa.nodes.*;
import it.unisa.nodes.expr.*;
import it.unisa.nodes.stat.*;
import it.unisa.nodes.var.*;
import javax.swing.tree.DefaultMutableTreeNode;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\005\000\002\002\004\000\002\025" +
    "\002\000\002\025\004\000\002\003\010\000\002\023\002" +
    "\000\002\023\004\000\002\005\005\000\002\005\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\031\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\007\000\002\032\005\000\002\032\007" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\006\016\000\002\006\014\000\002" +
    "\026\002\000\002\026\003\000\002\027\003\000\002\027" +
    "\005\000\002\007\004\000\002\007\005\000\002\024\002" +
    "\000\002\024\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\004\000\002\011\012\000\002\004" +
    "\002\000\002\004\005\000\002\012\011\000\002\013\005" +
    "\000\002\013\004\000\002\030\003\000\002\030\005\000" +
    "\002\014\004\000\002\016\005\000\002\017\006\000\002" +
    "\017\005\000\002\022\006\000\002\022\005\000\002\033" +
    "\003\000\002\033\005\000\002\033\004\000\002\033\006" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\004\000\002" +
    "\020\004\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\020\004\uffff\014\013\015\006\016\014\017" +
    "\012\020\010\021\uffff\001\002\000\004\013\235\001\002" +
    "\000\004\002\234\001\002\000\032\005\ufff8\010\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\027\ufff8\057\ufff8\060\ufff8\001\002\000\006\004\ufffc\021" +
    "\032\001\002\000\032\005\ufff5\010\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\027\ufff5\057" +
    "\ufff5\060\ufff5\001\002\000\040\004\uffff\005\uffff\007\uffff" +
    "\010\uffff\012\uffff\013\uffff\014\013\015\006\016\014\017" +
    "\012\020\010\021\uffff\027\uffff\057\uffff\060\uffff\001\002" +
    "\000\032\005\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\027\ufff6\057\ufff6\060\ufff6" +
    "\001\002\000\004\013\015\001\002\000\032\005\ufff7\010" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\027\ufff7\057\ufff7\060\ufff7\001\002\000\004\032" +
    "\020\001\002\000\004\031\017\001\002\000\040\004\ufff9" +
    "\005\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\027\ufff9\057\ufff9" +
    "\060\ufff9\001\002\000\012\053\022\054\024\055\021\056" +
    "\023\001\002\000\052\006\uffec\011\uffec\025\uffec\026\uffec" +
    "\031\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec" +
    "\047\uffec\050\uffec\051\uffec\001\002\000\052\006\uffee\011" +
    "\uffee\025\uffee\026\uffee\031\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\001\002" +
    "\000\052\006\uffeb\011\uffeb\025\uffeb\026\uffeb\031\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\001\002\000\052\006\uffed\011\uffed\025\uffed" +
    "\026\uffed\031\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\051\uffed\001\002\000\006\026" +
    "\026\031\ufff0\001\002\000\004\013\015\001\002\000\004" +
    "\031\uffef\001\002\000\026\004\ufffe\005\ufffe\007\ufffe\010" +
    "\ufffe\012\ufffe\013\ufffe\021\ufffe\027\ufffe\057\ufffe\060\ufffe" +
    "\001\002\000\006\004\ufffc\021\032\001\002\000\004\013" +
    "\202\001\002\000\004\004\034\001\002\000\032\005\uffff" +
    "\010\uffff\012\uffff\013\uffff\014\013\015\006\016\014\017" +
    "\012\020\010\027\uffff\057\uffff\060\uffff\001\002\000\004" +
    "\002\001\001\002\000\020\005\044\010\040\012\uffe2\013" +
    "\047\027\053\057\050\060\037\001\002\000\004\013\175" +
    "\001\002\000\022\013\062\022\061\034\055\052\063\053" +
    "\022\054\024\055\021\056\023\001\002\000\004\031\uffdf" +
    "\001\002\000\004\031\uffdb\001\002\000\004\031\uffe0\001" +
    "\002\000\022\013\062\022\061\034\055\052\063\053\022" +
    "\054\024\055\021\056\023\001\002\000\004\031\uffdc\001" +
    "\002\000\004\012\152\001\002\000\006\022\144\032\145" +
    "\001\002\000\022\013\062\022\061\034\055\052\063\053" +
    "\022\054\024\055\021\056\023\001\002\000\004\031\141" +
    "\001\002\000\004\031\uffdd\001\002\000\022\013\062\022" +
    "\061\034\055\052\063\053\022\054\024\055\021\056\023" +
    "\001\002\000\004\031\uffde\001\002\000\022\013\062\022" +
    "\061\034\055\052\063\053\022\054\024\055\021\056\023" +
    "\001\002\000\052\006\uffc7\011\uffc7\025\uffc7\026\uffc7\031" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\001\002\000\042\031\uffda\033\071" +
    "\034\066\035\076\036\103\037\074\040\067\041\100\042" +
    "\072\043\077\044\101\045\073\046\075\047\070\050\065" +
    "\051\102\001\002\000\052\006\uffc5\011\uffc5\025\uffc5\026" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\022\013\062" +
    "\022\061\034\055\052\063\053\022\054\024\055\021\056" +
    "\023\001\002\000\054\006\uffc6\011\uffc6\022\123\025\uffc6" +
    "\026\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002\000\022\013" +
    "\062\022\061\034\055\052\063\053\022\054\024\055\021" +
    "\056\023\001\002\000\052\006\uffb5\011\uffb5\025\uffb5\026" +
    "\uffb5\031\uffb5\033\071\034\066\035\076\036\103\037\074" +
    "\040\067\041\100\042\072\043\077\044\101\045\073\046" +
    "\075\047\070\050\uffb5\051\uffb5\001\002\000\022\013\062" +
    "\022\061\034\055\052\063\053\022\054\024\055\021\056" +
    "\023\001\002\000\022\013\062\022\061\034\055\052\063" +
    "\053\022\054\024\055\021\056\023\001\002\000\022\013" +
    "\062\022\061\034\055\052\063\053\022\054\024\055\021" +
    "\056\023\001\002\000\022\013\062\022\061\034\055\052" +
    "\063\053\022\054\024\055\021\056\023\001\002\000\022" +
    "\013\062\022\061\034\055\052\063\053\022\054\024\055" +
    "\021\056\023\001\002\000\022\013\062\022\061\034\055" +
    "\052\063\053\022\054\024\055\021\056\023\001\002\000" +
    "\022\013\062\022\061\034\055\052\063\053\022\054\024" +
    "\055\021\056\023\001\002\000\022\013\062\022\061\034" +
    "\055\052\063\053\022\054\024\055\021\056\023\001\002" +
    "\000\022\013\062\022\061\034\055\052\063\053\022\054" +
    "\024\055\021\056\023\001\002\000\022\013\062\022\061" +
    "\034\055\052\063\053\022\054\024\055\021\056\023\001" +
    "\002\000\022\013\062\022\061\034\055\052\063\053\022" +
    "\054\024\055\021\056\023\001\002\000\022\013\062\022" +
    "\061\034\055\052\063\053\022\054\024\055\021\056\023" +
    "\001\002\000\022\013\062\022\061\034\055\052\063\053" +
    "\022\054\024\055\021\056\023\001\002\000\022\013\062" +
    "\022\061\034\055\052\063\053\022\054\024\055\021\056" +
    "\023\001\002\000\022\013\062\022\061\034\055\052\063" +
    "\053\022\054\024\055\021\056\023\001\002\000\052\006" +
    "\uffc0\011\uffc0\025\uffc0\026\uffc0\031\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\067\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\001\002\000\052\006\uffbc\011\uffbc\025\uffbc\026\uffbc\031" +
    "\uffbc\033\071\034\066\035\076\036\103\037\074\040\067" +
    "\041\100\042\072\043\077\044\101\045\073\046\075\047" +
    "\070\050\065\051\uffbc\001\002\000\036\006\uffb9\011\uffb9" +
    "\025\uffb9\026\uffb9\031\uffb9\033\071\034\066\035\076\036" +
    "\103\037\074\040\067\041\100\050\uffb9\051\uffb9\001\002" +
    "\000\052\006\uffbd\011\uffbd\025\uffbd\026\uffbd\031\uffbd\033" +
    "\071\034\066\035\076\036\103\037\074\040\067\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\001\002\000\036\006\uffb6\011\uffb6\025\uffb6" +
    "\026\uffb6\031\uffb6\033\071\034\066\035\076\036\103\037" +
    "\074\040\067\041\100\050\uffb6\051\uffb6\001\002\000\052" +
    "\006\uffc2\011\uffc2\025\uffc2\026\uffc2\031\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\067\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\001\002\000\036\006\uffbb\011\uffbb\025\uffbb\026\uffbb" +
    "\031\uffbb\033\071\034\066\035\076\036\103\037\074\040" +
    "\067\041\100\050\uffbb\051\uffbb\001\002\000\052\006\uffc1" +
    "\011\uffc1\025\uffc1\026\uffc1\031\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\067\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\001" +
    "\002\000\036\006\uffb8\011\uffb8\025\uffb8\026\uffb8\031\uffb8" +
    "\033\071\034\066\035\076\036\103\037\074\040\067\041" +
    "\100\050\uffb8\051\uffb8\001\002\000\036\006\uffb7\011\uffb7" +
    "\025\uffb7\026\uffb7\031\uffb7\033\071\034\066\035\076\036" +
    "\103\037\074\040\067\041\100\050\uffb7\051\uffb7\001\002" +
    "\000\052\006\uffc4\011\uffc4\025\uffc4\026\uffc4\031\uffc4\033" +
    "\uffc4\034\uffc4\035\076\036\103\037\074\040\067\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\001\002\000\036\006\uffba\011\uffba\025\uffba" +
    "\026\uffba\031\uffba\033\071\034\066\035\076\036\103\037" +
    "\074\040\067\041\100\050\uffba\051\uffba\001\002\000\052" +
    "\006\uffbe\011\uffbe\025\uffbe\026\uffbe\031\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\001\002\000\052\006\uffc3\011\uffc3\025\uffc3\026\uffc3" +
    "\031\uffc3\033\uffc3\034\uffc3\035\076\036\103\037\074\040" +
    "\067\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\001\002\000\052\006\uffbf\011" +
    "\uffbf\025\uffbf\026\uffbf\031\uffbf\033\071\034\066\035\076" +
    "\036\103\037\074\040\067\041\100\042\072\043\077\044" +
    "\101\045\073\046\075\047\070\050\uffbf\051\uffbf\001\002" +
    "\000\026\013\062\022\061\024\126\025\127\034\055\052" +
    "\063\053\022\054\024\055\021\056\023\001\002\000\044" +
    "\025\uffcb\026\134\033\071\034\066\035\076\036\103\037" +
    "\074\040\067\041\100\042\072\043\077\044\101\045\073" +
    "\046\075\047\070\050\065\051\102\001\002\000\004\025" +
    "\133\001\002\000\004\013\130\001\002\000\052\006\uffcc" +
    "\011\uffcc\025\uffcc\026\uffcc\031\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\001" +
    "\002\000\006\025\uffc9\026\131\001\002\000\024\013\062" +
    "\022\061\024\126\034\055\052\063\053\022\054\024\055" +
    "\021\056\023\001\002\000\004\025\uffc8\001\002\000\052" +
    "\006\uffcd\011\uffcd\025\uffcd\026\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\001\002\000\024\013\062\022\061\024\126\034\055" +
    "\052\063\053\022\054\024\055\021\056\023\001\002\000" +
    "\004\025\uffca\001\002\000\042\025\137\033\071\034\066" +
    "\035\076\036\103\037\074\040\067\041\100\042\072\043" +
    "\077\044\101\045\073\046\075\047\070\050\065\051\102" +
    "\001\002\000\052\006\uffb3\011\uffb3\025\uffb3\026\uffb3\031" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\001\002\000\052\006\uffb4\011\uffb4" +
    "\025\uffb4\026\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\001\002\000" +
    "\022\005\044\007\uffe2\010\040\012\uffe2\013\047\027\053" +
    "\057\050\060\037\001\002\000\006\007\uffe1\012\uffe1\001" +
    "\002\000\042\031\uffd1\033\071\034\066\035\076\036\103" +
    "\037\074\040\067\041\100\042\072\043\077\044\101\045" +
    "\073\046\075\047\070\050\065\051\102\001\002\000\026" +
    "\013\062\022\061\024\126\025\150\034\055\052\063\053" +
    "\022\054\024\055\021\056\023\001\002\000\022\013\062" +
    "\022\061\034\055\052\063\053\022\054\024\055\021\056" +
    "\023\001\002\000\042\031\uffd0\033\071\034\066\035\076" +
    "\036\103\037\074\040\067\041\100\042\072\043\077\044" +
    "\101\045\073\046\075\047\070\050\065\051\102\001\002" +
    "\000\004\025\151\001\002\000\004\031\uffce\001\002\000" +
    "\004\031\uffcf\001\002\000\004\004\153\001\002\000\004" +
    "\031\154\001\002\000\004\002\ufffd\001\002\000\042\006" +
    "\156\033\071\034\066\035\076\036\103\037\074\040\067" +
    "\041\100\042\072\043\077\044\101\045\073\046\075\047" +
    "\070\050\065\051\102\001\002\000\034\005\uffff\007\uffff" +
    "\010\uffff\012\uffff\013\uffff\014\013\015\006\016\014\017" +
    "\012\020\010\027\uffff\057\uffff\060\uffff\001\002\000\022" +
    "\005\044\007\uffe2\010\040\012\uffe2\013\047\027\053\057" +
    "\050\060\037\001\002\000\006\007\161\012\uffd8\001\002" +
    "\000\032\005\uffff\010\uffff\012\uffff\013\uffff\014\013\015" +
    "\006\016\014\017\012\020\010\027\uffff\057\uffff\060\uffff" +
    "\001\002\000\004\012\163\001\002\000\004\005\164\001" +
    "\002\000\004\031\uffd9\001\002\000\020\005\044\010\040" +
    "\012\uffe2\013\047\027\053\057\050\060\037\001\002\000" +
    "\004\012\uffd7\001\002\000\042\011\170\033\071\034\066" +
    "\035\076\036\103\037\074\040\067\041\100\042\072\043" +
    "\077\044\101\045\073\046\075\047\070\050\065\051\102" +
    "\001\002\000\032\005\uffff\010\uffff\012\uffff\013\uffff\014" +
    "\013\015\006\016\014\017\012\020\010\027\uffff\057\uffff" +
    "\060\uffff\001\002\000\020\005\044\010\040\012\uffe2\013" +
    "\047\027\053\057\050\060\037\001\002\000\004\012\173" +
    "\001\002\000\004\011\174\001\002\000\004\031\uffd6\001" +
    "\002\000\026\013\uffd3\022\uffd3\026\200\031\uffd3\034\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002\000" +
    "\024\013\062\022\061\031\uffd4\034\055\052\063\053\022" +
    "\054\024\055\021\056\023\001\002\000\042\031\uffd5\033" +
    "\071\034\066\035\076\036\103\037\074\040\067\041\100" +
    "\042\072\043\077\044\101\045\073\046\075\047\070\050" +
    "\065\051\102\001\002\000\004\013\175\001\002\000\024" +
    "\013\uffd2\022\uffd2\031\uffd2\034\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\001\002\000\004\022\203\001\002" +
    "\000\016\015\006\016\014\017\012\020\010\023\210\025" +
    "\uffe8\001\002\000\004\025\216\001\002\000\004\013\215" +
    "\001\002\000\006\025\uffe6\026\213\001\002\000\004\025" +
    "\uffe7\001\002\000\012\015\006\016\014\017\012\020\010" +
    "\001\002\000\004\013\212\001\002\000\006\025\uffe3\026" +
    "\uffe3\001\002\000\014\015\006\016\014\017\012\020\010" +
    "\023\210\001\002\000\004\025\uffe5\001\002\000\006\025" +
    "\uffe4\026\uffe4\001\002\000\034\005\uffff\010\uffff\012\uffff" +
    "\013\uffff\014\013\015\006\016\014\017\012\020\010\027" +
    "\uffff\030\220\057\uffff\060\uffff\001\002\000\020\005\044" +
    "\010\040\012\uffe2\013\047\027\053\057\050\060\037\001" +
    "\002\000\012\015\006\016\014\017\012\020\010\001\002" +
    "\000\032\005\uffff\010\uffff\012\uffff\013\uffff\014\013\015" +
    "\006\016\014\017\012\020\010\027\uffff\057\uffff\060\uffff" +
    "\001\002\000\020\005\044\010\040\012\uffe2\013\047\027" +
    "\053\057\050\060\037\001\002\000\004\012\224\001\002" +
    "\000\004\021\225\001\002\000\004\031\226\001\002\000" +
    "\006\004\uffea\021\uffea\001\002\000\004\012\230\001\002" +
    "\000\004\021\231\001\002\000\004\031\232\001\002\000" +
    "\006\004\uffe9\021\uffe9\001\002\000\004\004\ufffb\001\002" +
    "\000\004\002\000\001\002\000\010\026\240\031\ufff4\032" +
    "\241\001\002\000\004\031\237\001\002\000\040\004\ufffa" +
    "\005\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\027\ufffa\057\ufffa" +
    "\060\ufffa\001\002\000\004\013\235\001\002\000\022\013" +
    "\062\022\061\034\055\052\063\053\022\054\024\055\021" +
    "\056\023\001\002\000\044\026\243\031\ufff2\033\071\034" +
    "\066\035\076\036\103\037\074\040\067\041\100\042\072" +
    "\043\077\044\101\045\073\046\075\047\070\050\065\051" +
    "\102\001\002\000\004\013\235\001\002\000\004\031\ufff1" +
    "\001\002\000\004\031\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\012\002\004\005\010\010\003\025\006\001" +
    "\001\000\004\031\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\030\023\032\001\001\000\002\001" +
    "\001\000\010\005\010\010\003\025\027\001\001\000\002" +
    "\001\001\000\004\032\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\030\023\232\001\001\000\002\001\001\000\004" +
    "\003\034\001\001\000\010\005\010\010\003\025\035\001" +
    "\001\000\002\001\001\000\022\011\042\012\040\013\053" +
    "\014\051\015\050\016\044\017\041\024\045\001\001\000" +
    "\004\030\175\001\001\000\010\020\166\021\055\022\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\154\021\055\022\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\142\021\055\022\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\056\021\055\022\057\001\001\000" +
    "\002\001\001\000\010\020\137\021\055\022\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\135\021\055\022\057\001\001\000\002\001\001" +
    "\000\010\020\063\021\055\022\057\001\001\000\002\001" +
    "\001\000\010\020\121\021\055\022\057\001\001\000\010" +
    "\020\120\021\055\022\057\001\001\000\010\020\117\021" +
    "\055\022\057\001\001\000\010\020\116\021\055\022\057" +
    "\001\001\000\010\020\115\021\055\022\057\001\001\000" +
    "\010\020\114\021\055\022\057\001\001\000\010\020\113" +
    "\021\055\022\057\001\001\000\010\020\112\021\055\022" +
    "\057\001\001\000\010\020\111\021\055\022\057\001\001" +
    "\000\010\020\110\021\055\022\057\001\001\000\010\020" +
    "\107\021\055\022\057\001\001\000\010\020\106\021\055" +
    "\022\057\001\001\000\010\020\105\021\055\022\057\001" +
    "\001\000\010\020\104\021\055\022\057\001\001\000\010" +
    "\020\103\021\055\022\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\123\021\055\022\057\033\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\123" +
    "\021\055\022\057\033\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\123\021\055\022\057\033\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\042\012\040\013\053" +
    "\014\051\015\050\016\044\017\041\024\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\123\021\055" +
    "\022\057\033\146\001\001\000\010\020\145\021\055\022" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\010" +
    "\010\003\025\156\001\001\000\022\011\042\012\040\013" +
    "\053\014\051\015\050\016\044\017\041\024\157\001\001" +
    "\000\004\004\161\001\001\000\010\005\010\010\003\025" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\011\042\012\040\013\053\014\051\015" +
    "\050\016\044\017\041\024\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\010\010\003\025\170\001" +
    "\001\000\022\011\042\012\040\013\053\014\051\015\050" +
    "\016\044\017\041\024\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\176\021\055\022\057\001\001\000\002\001\001\000" +
    "\004\030\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\205\010\204\026\203\027\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\205\010\204\027\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\010\010" +
    "\003\025\216\001\001\000\022\011\042\012\040\013\053" +
    "\014\051\015\050\016\044\017\041\024\226\001\001\000" +
    "\004\010\220\001\001\000\010\005\010\010\003\025\221" +
    "\001\001\000\022\011\042\012\040\013\053\014\051\015" +
    "\050\016\044\017\041\024\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\244" +
    "\001\001\000\010\020\241\021\055\022\057\001\001\000" +
    "\002\001\001\000\004\031\243\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              ProgramOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<FunOp> funList = (ArrayList<FunOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp main = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ProgramOp(varDeclList, funList, main); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new ArrayList<>();
                            RESULT.add(varDecl);
                            RESULT.addAll(varDeclList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT = new BodyOp(varDeclList, statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              ArrayList<FunOp> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= Fun FunList 
            {
              ArrayList<FunOp> RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp fun = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FunOp> funList = (ArrayList<FunOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
    	                    RESULT.add(fun);
    	                    RESULT.addAll(funList);
    	                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<DefaultMutableTreeNode> idList = (ArrayList<DefaultMutableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new VarDeclOp(type, idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDeclOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<DefaultMutableTreeNode> idList = (ArrayList<DefaultMutableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new VarDeclOp("var", idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              String RESULT =null;
		  RESULT = "integer"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              String RESULT =null;
		  RESULT = "real"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              String RESULT =null;
		  RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= BOOL 
            {
              String RESULT =null;
		  RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              ArrayList<DefaultMutableTreeNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            Identifier identifier = new Identifier(id);
                            Symbol sym = (Symbol) CUP$parser$stack.peek();
                            identifier.setLine(sym.left);
                            RESULT.add(identifier);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= ID COMMA IdListInit 
            {
              ArrayList<DefaultMutableTreeNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DefaultMutableTreeNode> idList = (ArrayList<DefaultMutableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            Identifier identifier = new Identifier(id);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2);
                            identifier.setLine(sym.left);
                            RESULT.add(identifier);
                            RESULT.addAll(idList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              ArrayList<DefaultMutableTreeNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            IdInitOp idInitOp = new IdInitOp(id, expr);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3);
                            idInitOp.getId().setLine(sym.left);
                            RESULT.add(idInitOp);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= ID ASSIGN Expr COMMA IdListInit 
            {
              ArrayList<DefaultMutableTreeNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DefaultMutableTreeNode> idList = (ArrayList<DefaultMutableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
    	                    IdInitOp idInitOp = new IdInitOp(id, expr);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4);
                            idInitOp.getId().setLine(sym.left);
                            RESULT.add(idInitOp);
                            RESULT.addAll(idList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Const 
            {
              ArrayList<DefaultMutableTreeNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            IdInitOp idInitOp = new IdInitOp(id, c);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3);
                            idInitOp.getId().setLine(sym.left);
                            RESULT.add(idInitOp);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= ID ASSIGN Const COMMA IdListInitObbl 
            {
              ArrayList<DefaultMutableTreeNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<DefaultMutableTreeNode> idList = (ArrayList<DefaultMutableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            IdInitOp idInitOp = new IdInitOp(id, c);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4);
                            idInitOp.getId().setLine(sym.left);
                            RESULT.add(idInitOp);
                            RESULT.addAll(idList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstValue RESULT =null;
		int integerConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String integerConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ConstValue("integer", integerConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ConstValue RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String realConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ConstValue("real", realConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= STRING_CONST 
            {
              ConstValue RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ConstValue("string", stringConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= BOOL_CONST 
            {
              ConstValue RESULT =null;
		int boolConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String boolConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ConstValue("bool", boolConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              FunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<ParamDeclOp> paramDeclList = (ArrayList<ParamDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT = new FunOp(id, paramDeclList, type, varDeclList, statList);
    		                Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11);
    		                RESULT.setLine(sym.left);
    		            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              FunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<ParamDeclOp> paramDeclList = (ArrayList<ParamDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT = new FunOp(id, paramDeclList, varDeclList, statList);
    		                Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9);
    		                RESULT.setLine(sym.left);
    		            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamDeclList ::= 
            {
              ArrayList<ParamDeclOp> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParamDeclOp> RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParamDeclOp> paramList = (ArrayList<ParamDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = paramList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NonEmptyParamDeclList ::= ParamDecl 
            {
              ArrayList<ParamDeclOp> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDeclOp param = (ParamDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            RESULT.add(param);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NonEmptyParamDeclList ::= ParamDecl COMMA NonEmptyParamDeclList 
            {
              ArrayList<ParamDeclOp> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamDeclOp param = (ParamDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParamDeclOp> paramList = (ArrayList<ParamDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            RESULT.add(param);
                            RESULT.addAll(paramList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParamDecl ::= Type ID 
            {
              ParamDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParamDeclOp(type, id);
                            Symbol sym = (Symbol) CUP$parser$stack.peek();
                            RESULT.getId().setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParamDecl ::= OUT Type ID 
            {
              ParamDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParamDeclOp("out", type, id);
                            Symbol sym = (Symbol) CUP$parser$stack.peek();
                            RESULT.getId().setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StatList ::= 
            {
              ArrayList<Stat> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= Stat SEMI StatList 
            {
              ArrayList<Stat> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new ArrayList <> ();
                            RESULT.add(stat);
                            RESULT.addAll(statList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= IfStat 
            {
              Stat RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfOp ifStat = (IfOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = ifStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= WhileStat 
            {
              Stat RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileOp whileStat = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = whileStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= ReadStat 
            {
              Stat RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReadOp readStat = (ReadOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = readStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= WriteStat 
            {
              Stat RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WriteOp writeStat = (WriteOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= writeStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= AssignStat 
            {
              Stat RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignOp assignStat = (AssignOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = assignStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= CallFun 
            {
              Stat RESULT =null;
		int callFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOp callFun = (CallFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = callFun;
                            Symbol sym = (Symbol) CUP$parser$stack.peek();
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= RETURN Expr 
            {
              Stat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ReturnOp(expr);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BodyOp elseBody = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new IfOp(expr, varDeclList, statList, elseBody); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Else ::= 
            {
              BodyOp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= ELSE VarDeclList StatList 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BodyOp(varDeclList, statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new WhileOp(expr, varDeclList, statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ReadStat ::= READ IdList Expr 
            {
              ReadOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ReadOp(idList, expr);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReadStat ::= READ IdList 
            {
              ReadOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ReadOp(idList);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IdList ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new ArrayList <> ();
                            Identifier identifier = new Identifier(id);
                            Symbol sym = (Symbol) CUP$parser$stack.peek();
                            identifier.setLine(sym.left);
                            RESULT.add(identifier);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IdList ::= ID COMMA IdList 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new ArrayList <> ();
                            Identifier identifier = new Identifier(id);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2);
                            identifier.setLine(sym.left);
                            RESULT.add(identifier);
                            RESULT.addAll(idList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WriteStat ::= WRITE Expr 
            {
              WriteOp RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String write = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new WriteOp(write, expr);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AssignOp(id, expr);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2);
                            RESULT.getId().setLine(sym.left);
                            sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallFunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new CallFunOp(id, exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CallFun ::= ID LPAR RPAR 
            {
              CallFunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new CallFunOp(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CallFunExpr ::= ID LPAR ExprList RPAR 
            {
              CallFunOpExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new CallFunOpExpr(id, exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFunExpr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CallFunExpr ::= ID LPAR RPAR 
            {
              CallFunOpExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new CallFunOpExpr(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFunExpr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            expr.setMode("in");
                            RESULT.add(expr);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            expr.setMode("in");
                            RESULT.add(expr);
                            RESULT.addAll(exprList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExprList ::= OUTPAR ID 
            {
              ArrayList<Expr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            Identifier identifier = new Identifier(id);
                            identifier.setMode("out");
                            RESULT.add(identifier);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<>();
                            Identifier identifier = new Identifier(id);
                            identifier.setMode("out");
                            RESULT.add(identifier);
                            RESULT.addAll(exprList);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Const 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = c;
                            Symbol sym = (Symbol) CUP$parser$stack.peek();
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Identifier(id);
                            Symbol sym = (Symbol) CUP$parser$stack.peek();
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= CallFunExpr 
            {
              Expr RESULT =null;
		int callFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOpExpr callFun = (CallFunOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = callFun;
                            Symbol sym = (Symbol) CUP$parser$stack.peek();
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("AddOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("DiffOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("MulOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("DivOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr DIVINT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("DivIntOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("AndOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("PowOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("StrCatOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("OrOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("GTOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("GEOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("LTOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("LEOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("EQOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BinaryOp("NEOp", expr1, expr2);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new UnaryOp("NotOp", expr);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new UnaryOp("UminusOp", expr);
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = expr;
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1);
                            RESULT.setLine(sym.left);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
